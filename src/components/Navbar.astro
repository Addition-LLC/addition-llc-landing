---
const menuItems = [
  { href: '/about', label: 'About us' },
  { href: '/#services', label: 'Services' },
  { href: '/#projects', label: 'Case Studies' },
  { href: '/#team', label: 'Team' },
  { href: '/articles', label: 'Blog'},
  { href: '/#contact', label: 'Contact' },
];

const navButton = { href: '/requestQuote', label: 'Request a quote' };
---

<header id="main-header" class="fixed top-0 left-0 z-50 w-full p-4 transition-all duration-300 ease-in-out">
  <div id="nav-content" class="mx-auto flex items-center justify-between transition-all duration-300 ease-in-out px-8 py-4 max-w-7xl">
    
    <a href="/" class="flex-shrink-0 z-10">
      <img src="/Logo.svg" class="h-8 w-auto" alt="Addition+ Logo" />
    </a>

    <nav id="desktop-nav" class="hidden lg:flex items-center justify-center absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
      <div id="nav-indicator" class="absolute h-10 bg-blue-100 rounded-full transition-all duration-300 ease-out"></div>
      {menuItems.map(item => (
        <a href={item.href} class="nav-link relative z-10 px-5 py-2 text-sm font-semibold leading-6 text-stone hover:text-blue-600 transition-colors duration-200">
          {item.label}
        </a>
      ))}
    </nav>

    <div class="hidden lg:flex z-10">
      <a 
        href={navButton.href} 
        class="rounded-full bg-blue-600 px-6 py-2.5 text-sm font-semibold text-white shadow-lg shadow-blue-500/20 hover:bg-blue-700 transition-all hover:scale-105"
      >
        {navButton.label}
      </a>
    </div>

    <div class="lg:hidden z-10">
      <button id="menu-toggle" type="button" class="inline-flex items-center justify-center rounded-md text-stone h-10 w-10">
        <span class="sr-only">Open main menu</span>
        <div class="space-y-1.5">
          <span class="block w-6 h-0.5 bg-stone transition-all duration-300 ease-out"></span>
          <span class="block w-6 h-0.5 bg-stone transition-all duration-300 ease-out"></span>
          <span class="block w-4 h-0.5 bg-stone transition-all duration-300 ease-out"></span>
        </div>
      </button>
    </div>

  </div>

  <div id="mobile-menu" class="fixed inset-0 z-40 hidden" role="dialog" aria-modal="true">
    <div id="mobile-menu-backdrop" class="fixed inset-0 bg-black/30 backdrop-blur-sm opacity-0 transition-opacity duration-300"></div>
    <div id="mobile-menu-panel" class="fixed inset-y-0 right-0 z-50 w-full max-w-sm bg-white p-6 transition-transform duration-300 translate-x-full">
      <div class="flex items-center justify-between">
        <a href="/">
          <img class="h-8 w-auto" src="/Logo.svg" alt="Addition+ Logo">
        </a>
        <button id="menu-close" type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700">
          <span class="sr-only">Close menu</span>
          <svg class="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
        </button>
      </div>
      <div class="mt-8 flow-root">
        <div class="-my-6 divide-y divide-gray-500/10">
          <div class="space-y-2 py-6">
            {menuItems.map(item => (
              <a href={item.href} class="nav-link -mx-3 block rounded-lg px-3 py-3 text-base font-semibold leading-7 text-stone hover:bg-gray-50">{item.label}</a>
            ))}
          </div>
          <div class="py-6">
            <a href={navButton.href} class="-mx-3 block rounded-lg px-3 py-4 text-base font-semibold leading-7 text-stone hover:bg-gray-50">{navButton.label}</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const header = document.getElementById('main-header');
  const navContent = document.getElementById('nav-content');

  if (header && navContent) {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        header.classList.add('scrolled');
      } else {
        header.classList.remove('scrolled');
      }
    };
    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll();
  }

  const desktopNav = document.getElementById('desktop-nav');
  const navIndicator = document.getElementById('nav-indicator') as HTMLElement | null;
  const navLinks = document.querySelectorAll('.nav-link');

  if (desktopNav && navIndicator && navLinks.length > 0) {
    const handleNavLinkHover = (e: MouseEvent) => {
      const link = e.currentTarget as HTMLElement;
      if (navIndicator) {
        navIndicator.style.width = `${link.offsetWidth}px`;
        navIndicator.style.left = `${link.offsetLeft}px`;
        navIndicator.style.opacity = '1';
      }
    };

    const handleNavMouseLeave = () => {
      if (navIndicator) {
        navIndicator.style.opacity = '0';
      }
    };

    navLinks.forEach(link => {
      link.addEventListener('mouseenter', handleNavLinkHover as EventListener);
    });

    desktopNav.addEventListener('mouseleave', handleNavMouseLeave);
  }

  const menuToggle = document.getElementById('menu-toggle');
  const menuClose = document.getElementById('menu-close');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileMenuBackdrop = document.getElementById('mobile-menu-backdrop') as HTMLElement | null;
  const mobileMenuPanel = document.getElementById('mobile-menu-panel') as HTMLElement | null;

  const openMenu = () => {
    if (mobileMenu) mobileMenu.classList.remove('hidden');
    if (menuToggle) menuToggle.classList.add('is-open');
    setTimeout(() => {
        if (mobileMenuBackdrop) mobileMenuBackdrop.style.opacity = '1';
        if (mobileMenuPanel) mobileMenuPanel.style.transform = 'translateX(0)';
    }, 10);
  };
  
  const closeMenu = () => {
    if (menuToggle) menuToggle.classList.remove('is-open');
    if (mobileMenuBackdrop) mobileMenuBackdrop.style.opacity = '0';
    if (mobileMenuPanel) mobileMenuPanel.style.transform = 'translateX(100%)';
    setTimeout(() => {
        if (mobileMenu) mobileMenu.classList.add('hidden');
    }, 300);
  };

  if (menuToggle && mobileMenu && menuClose && mobileMenuPanel && mobileMenuBackdrop) {
    menuToggle.addEventListener('click', openMenu);
    menuClose.addEventListener('click', closeMenu);
    mobileMenuBackdrop.addEventListener('click', closeMenu);
  }

  const allNavLinks = document.querySelectorAll('a.nav-link');
  allNavLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      const anchor = link as HTMLAnchorElement;
      const href = anchor.getAttribute('href');

      if (href && href.startsWith('/#')) {
        if (window.location.pathname === '/') {
            e.preventDefault();
            
            const targetId = href.substring(2);
            const targetElement = document.getElementById(targetId);

            if (targetElement) {
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        }
      }
      
      if (!mobileMenu?.classList.contains('hidden')) {
        closeMenu();
      }
    });
  });
});
</script>

<style>
  #main-header.scrolled #nav-content {
    max-width: 80rem;
    background-color: rgba(255, 255, 255, 0.75);
    backdrop-filter: blur(16px);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 9999px;
  }

  #nav-indicator {
    opacity: 0;
    pointer-events: none;
  }

  #menu-toggle.is-open span:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }
  
  #menu-toggle.is-open span:nth-child(2) {
    opacity: 0;
  }
  
  #menu-toggle.is-open span:nth-child(3) {
    width: 1.5rem; /* 24px */
    transform: translateY(-8px) rotate(-45deg);
  }
</style>

